import ArgumentParser
import Foundation
import Sake
import SwiftShell

@main
@CommandGroup
struct Commands: SakeApp {
    public static let configuration = SakeAppConfiguration(
        commandGroups: [
            TestCommands.self,
            ReleaseCommands.self,
        ]
    )
}

@CommandGroup
struct ReleaseCommands {
    struct ReleaseArguments: ParsableArguments {
        @Argument(help: "Version number")
        var version: String

        func validate() throws {
            guard version.range(of: #"^\d+\.\d+\.\d+$"#, options: .regularExpression) != nil else {
                throw ValidationError("Invalid version number. Should be in the format 'x.y.z'")
            }
        }
    }

    public static var bumpVersion: Command {
        Command(
            description: "Bump version",
            skipIf: { context in
                let arguments = try ReleaseArguments.parse(context.arguments)
                try arguments.validate()

                let version = arguments.version
                let versionFilePath = "Sources/Version.swift"
                let currentVersion = try String(contentsOfFile: versionFilePath)
                    .split(separator: "\"")[1]
                if currentVersion == version {
                    print("Version is already \(version). Skipping...")
                    return true
                } else {
                    return false
                }
            },
            run: { context in
                let arguments = try ReleaseArguments.parse(context.arguments)
                try arguments.validate()

                let version = arguments.version
                let versionFilePath = "Sources/Version.swift"
                let versionFileContent = """
                // This file is autogenerated. Do not edit.
                let progressLineVersion = "\(version)"

                """
                try versionFileContent.write(toFile: versionFilePath, atomically: true, encoding: .utf8)

                try runAndPrint("git", "add", versionFilePath)
                try runAndPrint("git", "commit", "-m", "chore(release): Bump version to \(version)")
                print("Version bumped to \(version)")
            }
        )
    }
}

@CommandGroup
struct TestCommands {
    public static var test: Command {
        Command(
            description: "Run tests",
            dependencies: [ensureDebugBuildIsUpToDate],
            run: { context in
                try runAndPrint(
                    bash:
                        "\(context.projectRoot)/Tests/integration_tests.sh \(context.projectRoot)/.build/debug/progressline"
                )
            }
        )
    }

    private static var ensureDebugBuildIsUpToDate: Command {
        Command(
            description: "Ensure debug build is up to date",
            run: { context in
                try runAndPrint(bash: "swift build --package-path \(context.projectRoot)")
            }
        )
    }
}

extension Command.Context {
    var projectRoot: String {
        "\(appDirectory)/.."
    }
}
